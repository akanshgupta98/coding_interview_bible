=====================================================================================================
Binary Search
=====================================================================================================
No need of explaination. See Code for your reference. 

=====================================================================================================
Minimum Capacity Transport Problem
=====================================================================================================
The problem is that for a given k, i have to find minimum Capacity of my truck such that I am able to 
transport all my goods in the given order. 
So say goods : [7,3,2,3,1,4] . k =3 . find Capacity
So what i have to do is, find minimum capacity my truck needs to have such that in maximum 3 rounds
I am able to deliver all my goods. 

Brute Force Approach:
for c = max(arr) to (sum of all elements in arr)
{
    for(trip 0 to k)

        for(i 0 to n)
}

Logic is simple:
c has to be maximum of all elements in the array, as I have to transport that. 
So i start from c = max,
now i will try to insert all elements in my container in total k trips, 
say for example, for c = 7, 
in first round i take, 7
in second i take, 3,2
in third i take, 3,1 
Now my trips are exhausted, but i am not able to transport all goods, So increase c. 
now i try for c =8
in first round i take, 7
in second i take, 3,2,3
in third i take, 1,4

Now my trips are exhausted and also all goods are transported. So that means, 
minimum capacity of my truck should be 8. 
As in worst case, k would be = 1.
Time complexity of this : O(sum of all elements * n). 
very bad complexity.

Optimized Approach:
Instead of incrementing c by 1. I use binary search Approach.

start = max(arr)
end = accumulate(arr.begin(),arr.end(),1)

while( start != end)
    c_not_found = true;
    c = start + end /2;

    now same logic as before for checking if this c is able to transport or not. 
    see code. 

    if(c_not_found)
        start = c+1;
    else
        end = c;
}

c = start;
ans = c;

for example: [100,103,50,90,85,24] k = 4.
for this if i do brute force, then number of iterations would be: 140-103 = 137. (140 is the ans)
But if i use optimized Approach, then number of iterations would be: 9.

Now moving onto worst case, k = 1. 
for this if i do brute force, then number of iterations would be: 452-103 = 349. 
But if i use optimized Approach, then number of iterations would be: 8

So time complexity reduced to O(nlog(sum of all elements)))

=====================================================================================================
Maximum number of groups problem
=====================================================================================================
NOT UNDERSTOOD. REVISIT. 
=====================================================================================================
Maximum special distance problem
=====================================================================================================
Given a set of x and y co-ordinantes(points), find the maximum special distance between them. 
Special distance is defined as: min(|xi-xj|,|yi-yj|)

Brute Force approach is simple:
O(n2). go over all of them, keep a track of max special distance obtained. 

Optimized Approach:
Use binary search for distance. 
Idea is: start from 0 , end: 10000000.
distance = 500000
So, check if this distance exists between any points, if yes, then check for greater distance
start = 500000 end = 10000000
if invalid, then check for lower side. 

Valid or invalid check:

Now here make use of maths logic. 

sort the points based on x-coordinate. 
We will iterate over points x for j. 

We know from special distance that, 
min(xi-xj,yi-yj) = dist. 

so for this, between any 2 points, 
|xi - xj| >= dist 
|yi - yj| >= dist. 
only then this distance will exist. 

So what we do is, 
first we check if there exist any point xj-xi (as we have sorted the points based on x and 
j is greater. ) i will be < j. 

So check for xj - xi where i exists till j. 

if we find any such point, then we check for j. 
But we don't. we simply break, because of sorting, 
what we will get is: 
xj - xi >= dist. if this is true, then good, else we need to break. 
because, we know that xi is increasing(as it is sorted) so if
xj - xi is not greater than distance, 
then after increasing i, we will get more smaller value now. So no chance that we will get this
condition true. so break. 

but if we find, 
Then carefully see:
|yi - yj|
we fixed yj for particular j. 
so yi - yj => yi - CONST.
now we want this quantity to be >= dist. 
So we want to maximize it. 
2 conditions possible:
yi > yj => yi - yj => for this to be maximum, we need yi to be maximum.
yi < yj => yj - yi => for this to be maximum, we need yi to be minimum. 

So we only keep a track of minimum and maximum yi from all points for which xj - xi >= dist 
holds true. 

By doing this, the problem is optimized into O(nlogn).

Please see code with DEBUG option to get better understanding of what is happening. 

Why we don't change i once we get a single valid xj -xi. 
Because see carefully, xj - xi >= dist => true. 
Now with j++, xj - xi >= dist, as for smaller xj it was true, then bigger xj and fixed xi will be true
so that is why we save time, and simple check for any other valid points. 

TIP: if there is a problem where we have to find a maximum from some minimums, or vice-versa,
binary search comes into the picture. 

